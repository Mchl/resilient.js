#!/usr/bin/env node
'use strict'

var Resilient = require('../')
var util = require('util')
var path = require('path')
var fs = require('fs')
var yargs = require('yargs')

var argv = yargs
  .usage('Resilient command-line HTTP client\nUsage: $0')
  .example('resilient http://httpbin.org/user-agent', '')
  .example('resilient http://httpbin.org/status/201 --status', '')
  .example('resilient http://httpbin.org/get --debug', '')
  .example('resilient http://httpbin.org/post -x POST \\\n            -d \'{"hello":"world"}\' -h "Content-Type: application/json"', '')
  .example('resilient /api/users -s http://server1.me,http://server2.me', '')
  .example('resilient /api/users -z http://discover1.me,http://discover1.me', '')
  .example('resilient --discover -z http://discover1.me,http://discover1.me --discovery-timeout 500', '')
  .describe('version', 'Show the server version')
  .alias('version', 'v')
  .boolean('version')
  .describe('path', 'Request path')
  .alias('path', 'p')
  .describe('servers', 'Define the service servers (comma separated)')
  .alias('servers', 's')
  .describe('method', 'HTTP method')
  .alias('method', 'x')
  .describe('header', 'Define custom request header')
  .alias('header', 'h')
  .describe('data', 'Value data to send as HTTP request body')
  .alias('data', 'd')
  .describe('file', 'File path to send as HTTP request body')
  .alias('file', 'f')
  .describe('retry', 'Request retry attempts')
  .alias('retry', 'r')
  .default('retry', 0)
  .describe('timeout', 'Request timeout in miliseconds')
  .alias('timeout', 't')
  .describe('discover', 'Get an updated list of servers asking for discovery servers')
  .alias('discover', 'k')
  .boolean('discover')
  .describe('discovery-servers', 'Define the discovery service servers (comma separated)')
  .alias('discovery-servers', 'z')
  .describe('discovery-retry', 'Discovery servers retry attempts')
  .alias('discovery-retry', 'R')
  .default('discovery-retry', 0)
  .describe('discovery-timeout', 'Discovery servers request maximum timeout in miliseconds')
  .alias('discovery-timeout', 'T')
  .describe('info', 'Show response headers and info')
  .alias('info', 'i')
  .boolean('info')
  .describe('status', 'Print the response status code')
  .alias('status', 'c')
  .boolean('status')
  .describe('debug', 'Enable debug mode')
  .alias('debug', 'D')
  .boolean('debug')
  .describe('help', 'Show help')
  .alias('help', 'H')
  .boolean('help')
  .argv

if (argv.help) return echo(yargs.help())
if (argv.version) return echo(Resilient.VERSION)
if (process.argv.length < 3) return echo('Missing required arguments')

newResilientClient(buildOptions(parseIntegerParams(argv)))

function newResilientClient(options) {
  var client = Resilient(options.config)
  if (argv.discover) {
    client.discoverServers(handler)
  } else {
    client.send(options.options, handler)
  }
}

function handler(err, res) {
  if (err) {
    echoError('Error:', err.message, err.status ? '(' + err.status + ')' : '') && process.exit(1)
  } else if (res.status >= 400 && !argv.status) {
    printToStderr(res)
  } else {
    printToStdout(res)
  }
}

function printToStdout(res) {
  if (argv.info) printInfo(res)
  if (argv.status) {
    echo(res.status)
  } else {
    if (res.data) res = res.data
    echo(util.inspect(res, { depth: null }))
  }
}

function printToStderr(res) {
  if (argv.info) printInfo(res)
  echoError('Error status:', res.status)
  process.exit(1)
}

function buildOptions(argv) {
  var config = { discovery: {}, service: {} }
  var options = { headers: {} }
  options.path = argv._[0]

  Object.keys(argv)
    .filter(isValidFlag)
    .forEach(mapOptionField(config, options))

  return { config: config, options: options }
}

function isValidFlag(str) {
  return str.length > 3 && str.indexOf('-') === -1
}

function mapOptionField(config, options) {
  return function (key) {
    var value = parseFlagValue(key)
    if (/^discovery/.test(key)) {
      mapDiscoveryOptions(key, value, config)
    } else {
      mapRequestOptions(key, value, config, options)
    }
  }
}

function parseFlagValue(key) {
  var value = argv[key]
  if (/retry/.test(key)) {
    value = parseInt(value, 10)
  }
  return value
}

function mapRequestOptions(key, value, config, options) {
  if (key === 'servers' && typeof argv[key] !== 'boolean') {
    config.service[key] = parseServers(value)
  } else if (key === 'header') {
    setHeader(value, options.headers)
  } else if (key === 'file') {
    if (argv.file) {
      options.data = fs.readFileSync(path.normalize(argv.file)).toString()
      setDataHttpMethod(options)
    }
  } else {
    options[key] = value
    if (key === 'data' && argv.data) {
      setDataHttpMethod(options)
    }
  }
}

function mapDiscoveryOptions(key, value, config) {
  key = key.replace('discovery', '').toLowerCase()
  if (key === 'servers') value = parseServers(value)
  config.discovery[key] = value
}

function setDataHttpMethod(options) {
  options.method = options.method || 'POST'
}

function setHeader(header, headers) {
  header = header.split(':').map(function (str) { return str.trim() })
  headers[header[0]] = header[1]
}

function printInfo(res) {
  echo('HTTP/' + res.httpVersion, res.status)
  Object.keys(res.headers).forEach(function (key) {
    echo(key + ':', res.headers[key])
  })
  echo('')
}

function parseServers(value) {
  return value.split(',').map(function (v) { return v.trim() })
}

function parseIntegerParams(params) {
  ['retry', 'timeout', 'discoveryTimeout', 'retryWait'].forEach(function (key) {
    if (params.hasOwnProperty(key) && typeof params[key] !== 'boolean') {
      params[key] = parseInt(params[key], 10)
    }
  })
  return params
}

function echo() {
  console.log.apply(console, arguments)
}

function echoError() {
  console.error.apply(console, arguments)
}
